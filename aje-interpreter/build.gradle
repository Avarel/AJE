/*
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.johnrengelman.shadow'

def versionObj = new Version(major: 3, minor: 5, revision: 0)

group = 'xyz.avarel'
archivesBaseName = 'AJE'
version = "$versionObj"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile project(":aje-ast")
    compile project(":aje-runtime-lib")
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jre8', version: '1.1.3-2'
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.1.3-2'
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: '1.1.3-2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task sourcesForRelease(type: Copy) {
    from 'src/main/java'
    into 'build/filteredSrc'
}

compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath

    options.encoding = 'UTF-8'

    dependsOn sourcesForRelease
}

jar {
    baseName = project.name
    manifest {
        attributes 'Implementation-Version': version
    }
}

shadowJar {
    classifier = "withDependencies"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from "${buildDir}/filteredSrc"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

bintray {
    user = bintrayUsername
    key = bintrayApiKey
    publications = ["BintrayRelease"]
    pkg {
        repo = 'maven'
        name = 'AJE'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/Avarel/AJE.git'
        publish = true
        version {
            name = project.version
            released = new Date()
        }
    }
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            from components.java
            groupId group
            artifactId archivesBaseName
            version version
            artifact javadocJar
            artifact sourcesJar
        }
    }
}

String getProjectProperty(String propertyName)
{
    String property = ""
    if (hasProperty(propertyName))
    {
        property = this.properties[propertyName]
    }
    return property
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}


build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
    dependsOn shadowJar

    dependsOn test

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
    shadowJar.mustRunAfter sourcesJar
}

bintrayUpload {
    dependsOn build

    onlyIf { !getProjectProperty("bintrayUsername").empty }
    onlyIf { !getProjectProperty("bintrayApiKey").empty }
}

class Version {
    String major, minor, revision


    String toString() {
        "${major}.${minor}.${revision}"
    }
}